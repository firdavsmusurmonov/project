# Generated by Django 4.0.5 on 2022-07-10 11:43

import account.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customuser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('smscode', models.IntegerField(default=0)),
                ('complete', models.IntegerField(default=0)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('phone', models.IntegerField(default=0)),
                ('avatar', models.ImageField(default='users/default.png', upload_to=account.models.get_avatar)),
                ('gender', models.CharField(blank=True, choices=[('man', 'Man'), ('woman', ' Woman')], max_length=50, null=True)),
                ('date', models.CharField(blank=True, max_length=150, null=True)),
                ('month', models.CharField(blank=True, max_length=150, null=True)),
                ('year', models.CharField(blank=True, max_length=150, null=True)),
                ('region_birth', models.CharField(blank=True, max_length=150, null=True)),
                ('city_birth', models.CharField(blank=True, max_length=150, null=True)),
                ('region', models.CharField(blank=True, max_length=150, null=True)),
                ('city', models.CharField(blank=True, max_length=150, null=True)),
                ('fulladress', models.CharField(max_length=150, null=True)),
                ('passport', models.CharField(max_length=150, null=True)),
                ('passport_date', models.CharField(blank=True, max_length=150, null=True)),
                ('passport_month', models.CharField(blank=True, max_length=150, null=True)),
                ('passport_year', models.CharField(blank=True, max_length=150, null=True)),
                ('education', models.CharField(blank=True, max_length=150, null=True)),
                ('family', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_gender', models.CharField(blank=True, choices=[('man', 'Man'), ('woman', ' Woman')], max_length=50, null=True)),
                ('wife_date', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_month', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_year', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_region_birth', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_city_birth', models.CharField(blank=True, max_length=150, null=True)),
                ('wife_avatar', models.ImageField(default='users/default.png', upload_to=account.models.get_avatar_wife)),
                ('wife_education', models.CharField(blank=True, max_length=150, null=True)),
                ('childs', models.CharField(blank=True, max_length=150, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
